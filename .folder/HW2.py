# Задача 1 (пройдена): На столе лежат n монеток. Некоторые из монеток лежат вверх решкой, а некоторые – гербом. Ваша задача - определить минимальное количество монеток, 
# которые нужно перевернуть, чтобы все монетки лежали одной и той же стороной вверх.
# Входные данные:
# На вход программе подается список coins, где coins[i] равно 0, если i-я монетка лежит гербом вверх, и равно 1, если i-я монетка лежит решкой вверх. 
# Размер списка не превышает 1000 элементов.
# Выходные данные:
# Программа должна вывести одно целое число - минимальное количество монеток, которые нужно перевернуть.

# Пример использования 
# На входе:
# coins = [0, 1, 0, 1, 1, 0]
# На выходе:
# 3

coins = [0, 1, 0, 1, 1, 0]

def min_flips(coins):
    heads = coins.count(0)
    tails = coins.count(1)

    if heads < tails:
        return heads
    else:
        return tails

min_flips_needed = min_flips(coins)
print(min_flips_needed)

# Эталонное решение платформы:
# coins = [0, 1, 0, 1, 1, 0]
# count_zero = 0
# count_one = 0

# for coin in coins:
#     if coin == 0:
#         count_zero += 1
#     else:
#         count_one += 1

# if count_one > count_zero:
#     print(count_zero)
# else:
#     print(count_one)


# Задача 2 (эталонное решение): Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница. Петя помогает Кате по математике.
# Он задумывает два натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать. Для этого Петя делает две подсказки. Он называет сумму этих чисел S и их произведение P. Помогите Кате отгадать задуманные Петей числа.
# Примечание: числа S и P задавать не нужно, они будут передаваться в тестах. В результате вы должны вывести все возможные пары чисел X и Y через пробел, такие что X <= Y.
# Пример
# На входе:
# s = 12
# p = 27
# На выходе:
# 3 9

solutions = []
for i in range(1, 1001):
    for j in range(1, 1001):
        if s == i + j and p == i * j:
            solutions.append((min(i, j), max(i, j)))
solutions = list(set(solutions))

for solution in solutions:
    print(solution[0], solution[1])


# Задача 3 (пройдена): Требуется вывести все целые степени двойки (т.е. числа вида 2k), не превосходящие числаN.
# Пример
# n=16
# #Вывод
# 1
# 2
# 4
# 8
# 16

n = 16

def powers_of_two(n):
    power = 0
    result = 1
    while result <= n:
        print(result)
        power += 1
        result = 2 ** power

powers_of_two(n)

# Эталонное решение платформы:
# i = 0
# while 2 ** i <= n:
#     print(2 ** i)
#     i += 1